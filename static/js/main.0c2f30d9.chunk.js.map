{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","xIsNext","stepNumber","history","Array","fill","window","location","reload","step","setState","slice","length","calculateWinner","concat","status","current","winner","handleClick","lines","a","b","c","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c2f30d9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square(props) {\r\n    return (\r\n        <button className='square' onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport Square from './Square'\r\n\r\nexport default class Board extends Component {\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)} />\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='border-row'>\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className='border-row'>\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className='border-row'>\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Board from './Board';\r\n\r\n\r\n\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                { squares: Array(9).fill(null) }\r\n            ]\r\n        }\r\n    }\r\n    reload() {\r\n        window.location.reload()\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        })\r\n    }\r\n\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const winner = calculateWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner is ' + winner\r\n        } else {\r\n            status = 'Next player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <h1>TIC TAC TOE</h1>\r\n                <div className='game'>\r\n                    <div className='game-board'>\r\n                        <Board onClick={(i) => this.handleClick(i)}\r\n                            squares={current.squares} />\r\n                    </div>\r\n\r\n                    <div className='game-info'>\r\n\r\n                        <h2 className='statuss'>{status}</h2>\r\n                        <button className='button-fix' onClick={() => { this.reload() }}>Restart</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n            return squares[a]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return null;\r\n}","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Game from './components/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <Game />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}